{"ast":null,"code":"// API Error Handler Utility\nexport class APIError extends Error {\n  constructor(message, status, details = null) {\n    super(message);\n    this.name = 'APIError';\n    this.status = status;\n    this.details = details;\n  }\n}\nexport const handleAPIError = error => {\n  console.error('API Error:', error);\n\n  // Network errors\n  if (!error.response) {\n    return {\n      message: 'Network error. Please check your connection and try again.',\n      type: 'network'\n    };\n  }\n  const {\n    status,\n    data\n  } = error.response;\n\n  // Handle different HTTP status codes\n  switch (status) {\n    case 400:\n      if (data.details && Array.isArray(data.details)) {\n        // Validation errors\n        const fieldErrors = data.details.map(detail => `${detail.field}: ${detail.message}`).join(', ');\n        return {\n          message: `Validation error: ${fieldErrors}`,\n          type: 'validation',\n          details: data.details\n        };\n      }\n      return {\n        message: data.error || 'Invalid request',\n        type: 'validation'\n      };\n    case 401:\n      return {\n        message: 'Please log in again to continue.',\n        type: 'auth',\n        shouldRedirect: '/login'\n      };\n    case 403:\n      return {\n        message: 'You do not have permission to perform this action.',\n        type: 'permission'\n      };\n    case 404:\n      return {\n        message: 'The requested resource was not found.',\n        type: 'not_found'\n      };\n    case 429:\n      return {\n        message: 'Too many requests. Please wait a moment and try again.',\n        type: 'rate_limit'\n      };\n    case 500:\n      return {\n        message: 'Server error. Please try again later.',\n        type: 'server'\n      };\n    default:\n      return {\n        message: data.error || 'An unexpected error occurred.',\n        type: 'unknown'\n      };\n  }\n};\nexport const sanitizeInput = input => {\n  if (typeof input !== 'string') return input;\n  return input.replace(/<[^>]*>/g, '') // Remove HTML tags\n  .replace(/[<>\"'&]/g, '') // Remove dangerous characters\n  .trim();\n};\nexport const validatePlayerName = name => {\n  if (!name || typeof name !== 'string') {\n    throw new Error('Player name is required');\n  }\n  const sanitized = sanitizeInput(name);\n  if (sanitized.length === 0) {\n    throw new Error('Player name cannot be empty');\n  }\n  if (sanitized.length > 50) {\n    throw new Error('Player name must be 50 characters or less');\n  }\n  if (!/^[a-zA-Z0-9\\s\\-_]+$/.test(sanitized)) {\n    throw new Error('Player name can only contain letters, numbers, spaces, hyphens, and underscores');\n  }\n  return sanitized;\n};\nexport const validateAmount = amount => {\n  const num = Number(amount);\n  if (isNaN(num)) {\n    throw new Error('Amount must be a valid number');\n  }\n  if (num < 0) {\n    throw new Error('Amount cannot be negative');\n  }\n  if (num > 999999.99) {\n    throw new Error('Amount cannot exceed 999,999.99');\n  }\n  return Math.round(num * 100) / 100;\n};","map":{"version":3,"names":["APIError","Error","constructor","message","status","details","name","handleAPIError","error","console","response","type","data","Array","isArray","fieldErrors","map","detail","field","join","shouldRedirect","sanitizeInput","input","replace","trim","validatePlayerName","sanitized","length","test","validateAmount","amount","num","Number","isNaN","Math","round"],"sources":["/Users/krishdembla/Desktop/poker-debt-app/webui/src/utils/apiErrorHandler.js"],"sourcesContent":["// API Error Handler Utility\nexport class APIError extends Error {\n  constructor(message, status, details = null) {\n    super(message);\n    this.name = 'APIError';\n    this.status = status;\n    this.details = details;\n  }\n}\n\nexport const handleAPIError = (error) => {\n  console.error('API Error:', error);\n\n  // Network errors\n  if (!error.response) {\n    return {\n      message: 'Network error. Please check your connection and try again.',\n      type: 'network'\n    };\n  }\n\n  const { status, data } = error.response;\n\n  // Handle different HTTP status codes\n  switch (status) {\n    case 400:\n      if (data.details && Array.isArray(data.details)) {\n        // Validation errors\n        const fieldErrors = data.details.map(detail => \n          `${detail.field}: ${detail.message}`\n        ).join(', ');\n        return {\n          message: `Validation error: ${fieldErrors}`,\n          type: 'validation',\n          details: data.details\n        };\n      }\n      return {\n        message: data.error || 'Invalid request',\n        type: 'validation'\n      };\n\n    case 401:\n      return {\n        message: 'Please log in again to continue.',\n        type: 'auth',\n        shouldRedirect: '/login'\n      };\n\n    case 403:\n      return {\n        message: 'You do not have permission to perform this action.',\n        type: 'permission'\n      };\n\n    case 404:\n      return {\n        message: 'The requested resource was not found.',\n        type: 'not_found'\n      };\n\n    case 429:\n      return {\n        message: 'Too many requests. Please wait a moment and try again.',\n        type: 'rate_limit'\n      };\n\n    case 500:\n      return {\n        message: 'Server error. Please try again later.',\n        type: 'server'\n      };\n\n    default:\n      return {\n        message: data.error || 'An unexpected error occurred.',\n        type: 'unknown'\n      };\n  }\n};\n\nexport const sanitizeInput = (input) => {\n  if (typeof input !== 'string') return input;\n  \n  return input\n    .replace(/<[^>]*>/g, '') // Remove HTML tags\n    .replace(/[<>\"'&]/g, '') // Remove dangerous characters\n    .trim();\n};\n\nexport const validatePlayerName = (name) => {\n  if (!name || typeof name !== 'string') {\n    throw new Error('Player name is required');\n  }\n  \n  const sanitized = sanitizeInput(name);\n  \n  if (sanitized.length === 0) {\n    throw new Error('Player name cannot be empty');\n  }\n  \n  if (sanitized.length > 50) {\n    throw new Error('Player name must be 50 characters or less');\n  }\n  \n  if (!/^[a-zA-Z0-9\\s\\-_]+$/.test(sanitized)) {\n    throw new Error('Player name can only contain letters, numbers, spaces, hyphens, and underscores');\n  }\n  \n  return sanitized;\n};\n\nexport const validateAmount = (amount) => {\n  const num = Number(amount);\n  \n  if (isNaN(num)) {\n    throw new Error('Amount must be a valid number');\n  }\n  \n  if (num < 0) {\n    throw new Error('Amount cannot be negative');\n  }\n  \n  if (num > 999999.99) {\n    throw new Error('Amount cannot exceed 999,999.99');\n  }\n  \n  return Math.round(num * 100) / 100;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}